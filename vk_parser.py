import requests
import re
import time
import json
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

VK_TOKEN = os.getenv("VK_TOKEN")
VK_API_VERSION = "5.199"
CACHE_FILE = "parsed_posts.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –±–∞–ª–ª–æ–≤
POSITIVE_KEYWORDS = {
    "–ø—Ä–∏—é—Ç": 2,
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": 1,
    "–∫–æ—à–∫–∏": 1,
    "—Å–æ–±–∞–∫–∏": 1,
    "–ø–æ–º–æ—â—å –∂–∏–≤–æ—Ç–Ω—ã–º": 3,
    "–≤ –ø–æ–∏—Å–∫–∞—Ö –¥–æ–º–∞": 3,
    "—Å–ø–∞—Å–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö": 3,
    "–±–µ–∑–¥–æ–º–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ": 2,
}
NEGATIVE_KEYWORDS = {
    "–±–∏–∑–Ω–µ—Å": -2,
    "–º–∞–≥–∞–∑–∏–Ω": -2,
    "—Ä–µ–∫–ª–∞–º–∞": -3,
    "–¥–æ—Å—Ç–∞–≤–∫–∞": -2,
    "–ø—Ä–æ–¥–∞–∂–∞": -2,
}

MIN_SCORE_THRESHOLD = 2  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞
MAX_POSTS = 10

# –ö—ç—à–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ id
if os.path.exists(CACHE_FILE):
    with open(CACHE_FILE, "r", encoding="utf-8") as f:
        parsed_posts = set(json.load(f))
else:
    parsed_posts = set()

def save_cache():
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(parsed_posts), f)

def calculate_post_score(text):
    text_lower = text.lower()
    score = 0
    reasons = []

    # –°—á–∏—Ç–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for phrase, pts in POSITIVE_KEYWORDS.items():
        if phrase in text_lower:
            score += pts
            reasons.append(f"+{pts} '{phrase}'")

    # –°—á–∏—Ç–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for phrase, pts in NEGATIVE_KEYWORDS.items():
        if phrase in text_lower:
            score += pts
            reasons.append(f"{pts} '{phrase}'")

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –¥–≤–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞ —Ä—è–¥–æ–º (–≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏) + 3 –±–∞–ª–ª–∞
    sentences = re.split(r'[.!?]', text_lower)
    for sentence in sentences:
        found = [kw for kw in POSITIVE_KEYWORDS if kw in sentence]
        if len(found) >= 2:
            score += 3
            reasons.append(f"+3 –∑–∞ —Å–≤—è–∑–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {found}")
            break

    return score, reasons

def add_shelter(post_id, group_name, group_url, city_name, post_info_json):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –∏–ª–∏ —Ñ–∞–π–ª
    # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç {post_id} –∏–∑ –≥—Ä—É–ø–ø—ã '{group_name}' ({group_url}) –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}")

def search_vk_groups(city_name):
    print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")

    total_added = 0
    offset = 0
    count_per_request = 20

    while total_added < MAX_POSTS:
        url = "https://api.vk.com/method/newsfeed.search"
        params = {
            "access_token": VK_TOKEN,
            "q": "",  # –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –≤—Å–µ –ø–æ—Å—Ç—ã, —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–¥–µ
            "count": count_per_request,
            "offset": offset,
            "v": VK_API_VERSION,
            "extended": 1,
            "fields": "city,description",
            "filters": "post"
        }

        try:
            response = requests.get(url, params=params).json()
            if 'error' in response:
                print(f"–û—à–∏–±–∫–∞ VK API: {response['error'].get('error_msg')}")
                break

            items = response.get('response', {}).get('items', [])
            if not items:
                print("–ü–æ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º.")
                break

            for post in items:
                post_id = post['post_id'] if 'post_id' in post else post['id']
                owner_id = post['source_id']
                text = post.get('text', '')
                date = datetime.fromtimestamp(post['date']).strftime("%d.%m.%Y")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                unique_post_id = f"{owner_id}_{post_id}"
                if unique_post_id in parsed_posts:
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø–æ—Å—Ç {unique_post_id}")
                    continue

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É: –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
                city_lower = city_name.lower()
                if city_lower not in text.lower():
                    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É, –Ω–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                    print(f"–û—Ç–±—Ä–æ—à–µ–Ω –ø–æ—Å—Ç {unique_post_id}: –≥–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—Å—Ç–µ")
                    parsed_posts.add(unique_post_id)
                    continue

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –ø–æ—Å—Ç–∞
                score, reasons = calculate_post_score(text)

                if score >= MIN_SCORE_THRESHOLD:
                    print(f"‚úÖ –ü–æ—Å—Ç {unique_post_id} –ø—Ä–∏–Ω—è—Ç. –ë–∞–ª–ª—ã: {score}. –ü—Ä–∏—á–∏–Ω—ã: {reasons}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –∏ –¥—Ä—É–≥—É—é –∏–Ω—Ñ—É)
                    add_shelter(unique_post_id, f"–ì—Ä—É–ø–ø–∞ {owner_id}", f"https://vk.com/wall{owner_id}_{post_id}", city_name, json.dumps({"date": date, "text": text[:500]}, ensure_ascii=False))
                    parsed_posts.add(unique_post_id)
                    total_added += 1
                    if total_added >= MAX_POSTS:
                        break
                else:
                    print(f"‚ùå –ü–æ—Å—Ç {unique_post_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ë–∞–ª–ª—ã: {score}. –ü—Ä–∏—á–∏–Ω—ã: {reasons}")
                    parsed_posts.add(unique_post_id)

            offset += count_per_request
            time.sleep(0.4)  # API throttle

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ—Å—Ç–æ–≤: {e}")
            break

    save_cache()
    print(f"üèÅ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_added}")

if __name__ == "__main__":
    city = "–ú–æ—Å–∫–≤–∞"  # –ø—Ä–∏–º–µ—Ä –≥–æ—Ä–æ–¥–∞
    search_and_filter_posts(city)
