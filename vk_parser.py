import requests
import re
import time
import json
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

VK_TOKEN = os.getenv("VK_TOKEN")
VK_KEYWORDS = os.getenv("VK_KEYWORDS", "–ø—Ä–∏—é—Ç,–∂–∏–≤–æ—Ç–Ω—ã–µ,–∫–æ—à–∫–∏,—Å–æ–±–∞–∫–∏").split(",")
VK_API_VERSION = "5.199"
CACHE_FILE = "parsed_groups.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞
if os.path.exists(CACHE_FILE):
    with open(CACHE_FILE, "r", encoding="utf-8") as f:
        parsed_groups = set(json.load(f))
else:
    parsed_groups = set()

def save_cache():
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(parsed_groups), f)

def get_group_info(group_id):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ"""
    url = "https://api.vk.com/method/groups.getById"
    params = {
        "access_token": VK_TOKEN,
        "group_id": group_id,
        "fields": "description,city",
        "v": VK_API_VERSION
    }
    try:
        res = requests.get(url, params=params).json()
        return res.get('response', [{}])[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
        return {}

def is_city_match(group_info, target_city):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã"""
    target_lower = target_city.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≥—Ä—É–ø–ø—ã
    if 'city' in group_info:
        group_city = group_info['city']['title'].lower()
        if target_lower in group_city:
            return True
    
    # –ü–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
    description = group_info.get('description', '').lower()
    patterns = [
        rf"\b{re.escape(target_lower)}\b",
        rf"\b–≥\.?\s*{re.escape(target_lower)}\b",
        rf"\b{re.escape(target_lower[:5])}\w*\b"  # –î–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π —Ç–∏–ø–∞ "–ù–æ–≤–æ—Å–∏–±"
    ]
    
    return any(re.search(pattern, description) for pattern in patterns)

def get_group_posts(group_id):
    """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –≥—Ä—É–ø–ø—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
    url = "https://api.vk.com/method/wall.get"
    params = {
        "access_token": VK_TOKEN,
        "owner_id": -group_id,
        "count": 10,
        "filter": "owner",
        "v": VK_API_VERSION
    }
    try:
        res = requests.get(url, params=params).json()
        return res.get("response", {}).get("items", [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def extract_post_info(posts):
    """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤ (—É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞)"""
    relevant_posts = []
    for post in posts:
        text = post.get('text', '')
        if any(kw in text.lower() for kw in VK_KEYWORDS):
            relevant_posts.append({
                'date': datetime.fromtimestamp(post['date']).strftime("%d.%m.%Y"),
                'text': text[:500]
            })
    return relevant_posts

def search_vk_groups(city_name):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞"""
    print(f"\nüîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city_name}")
    
    total_added = 0
    exclusion_keywords = ["–±–∏–∑–Ω–µ—Å", "–º–∞–≥–∞–∑–∏–Ω", "—Ä–µ–∫–ª–∞–º–∞", "–¥–æ—Å—Ç–∞–≤–∫–∞"]

    for keyword in VK_KEYWORDS:
        offset = 0
        while total_added < 10:
            url = "https://api.vk.com/method/groups.search"
            params = {
                "access_token": VK_TOKEN,
                "q": f"{keyword}",
                "count": 20,
                "offset": offset,
                "v": VK_API_VERSION
            }
            
            try:
                response = requests.get(url, params=params).json()
                groups = response.get('response', {}).get('items', [])
                
                for group in groups:
                    group_id = abs(group['id'])
                    if group_id in parsed_groups:
                        continue
                        
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
                    group_info = get_group_info(group_id)
                    time.sleep(0.3)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –ª–∏–º–∏—Ç–∞ API
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    if not is_city_match(group_info, city_name):
                        continue
                        
                    # –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
                    group_name = group['name'].lower()
                    if any(bw in group_name for bw in exclusion_keywords):
                        continue
                        
                    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤
                    posts = get_group_posts(group_id)
                    post_info = extract_post_info(posts)
                    
                    if not post_info:
                        continue
                        
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    add_shelter(
                        f"vk_{group_id}",
                        group['name'],
                        f"https://vk.com/{group['screen_name']}",
                        city_name,
                        json.dumps(post_info, ensure_ascii=False)
                    )
                    
                    parsed_groups.add(group_id)
                    total_added += 1
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group['name']}")
                    
                    if total_added >= 10:
                        break
                        
                offset += 20
                if offset >= 100:
                    break
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø: {e}")
                break

    save_cache()
    print(f"üèÅ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –≥—Ä—É–ø–ø: {total_added}")

# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
search_vk_groups("–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
