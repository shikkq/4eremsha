
import requests
import re
import time
import json
import os
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

VK_TOKEN = os.getenv("VK_TOKEN")
VK_KEYWORDS = os.getenv("VK_KEYWORDS", "–ø—Ä–∏—é—Ç,–∂–∏–≤–æ—Ç–Ω—ã–µ,–∫–æ—à–∫–∏,—Å–æ–±–∞–∫–∏,–¥–æ–º,–æ—Ç–¥–∞—ë—Ç—Å—è,–∏—â–µ—Ç,–ª–∞—Å–∫–æ–≤—ã–π,–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏").split(",")
VK_BADWORDS = os.getenv("VK_BADWORDS", "–±–∏–∑–Ω–µ—Å,–º–∞–≥–∞–∑–∏–Ω,–¥–æ—Å—Ç–∞–≤–∫–∞,—Ä–µ–∫–ª–∞–º–∞,–±—Ä–µ–Ω–¥,—Ç–æ—Ä–≥–æ–≤–ª—è").split(",")
VK_API_VERSION = "5.199"

def get_group_posts(domain):
    url = "https://api.vk.com/method/wall.get"
    params = {
        "access_token": VK_TOKEN,
        "domain": domain,
        "count": 10,
        "filter": "owner",
        "v": VK_API_VERSION
    }
    try:
        res = requests.get(url, params=params).json()
        return res.get("response", {}).get("items", [])
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤: {e}")
        return []

def score_post(text):
    score = 0
    reasons = []

    lower_text = text.lower()

    keyword_matches = [kw for kw in VK_KEYWORDS if kw.strip() in lower_text]
    if keyword_matches:
        points = len(keyword_matches)
        score += points
        reasons.append(f"+{points} –∫–ª—é—á. —Å–ª–æ–≤–∞: {', '.join(keyword_matches)}")

    # –°–≤—è–∑–∫–∏ —Ç–∏–ø–∞ "–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏", "–∏—â–µ—Ç –¥–æ–º"
    phrase_patterns = [
        "–≤ –¥–æ–±—Ä—ã–µ —Ä—É–∫–∏", "–∏—â–µ—Ç –¥–æ–º", "–æ—Ç–¥–∞(–µ|—ë)—Ç—Å—è", "–∏—â–µ—Ç —Ö–æ–∑—è–∏–Ω–∞", "–Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–º–µ"
    ]
    for phrase in phrase_patterns:
        if re.search(rf"\b{phrase}\b", lower_text):
            score += 3
            reasons.append(f"+3 —Ñ—Ä–∞–∑–∞: {phrase}")

    badword_matches = [bw for bw in VK_BADWORDS if bw in lower_text]
    if badword_matches:
        penalty = -2 * len(badword_matches)
        score += penalty
        reasons.append(f"{penalty} –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞: {', '.join(badword_matches)}")

    if len(text.strip()) < 50:
        score -= 1
        reasons.append("-1 —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")

    return score, reasons

def analyze_posts(domain):
    print(f"\nüì° –ê–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã: {domain}")
    posts = get_group_posts(domain)
    if not posts:
        print("‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    for i, post in enumerate(posts, 1):
        text = post.get("text", "")
        date = datetime.fromtimestamp(post["date"]).strftime("%d.%m.%Y")
        score, reasons = score_post(text)
        if score >= 3:
            print(f"[‚úÖ {i}] {date} | {score} –±–∞–ª–ª–æ–≤ ‚Äî –ü–†–û–®–Å–õ")
        else:
            print(f"[‚ùå {i}] {date} | {score} –±–∞–ª–ª–æ–≤ ‚Äî –û–¢–ö–õ–û–ù–Å–ù")
        print("–ü—Ä–∏—á–∏–Ω—ã: " + "; ".join(reasons) + "\n")
