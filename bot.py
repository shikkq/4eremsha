from aiogram import Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from database import (
    init_db, get_shelters_for_city, add_favorite,
    get_user_favorites, get_recent_posts_for_group,
    get_shelter_by_id, get_filtered_shelters
)
import asyncio
import re
from datetime import datetime
from urllib.parse import quote

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –±–∞–∑–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è)
init_db()
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏)
CITIES = ["–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≥–æ—Ä–æ–¥–∞: user_id -> city
user_city: dict[int, str] = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
# —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å –µ–≥–æ (–∏ –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç)
user_last_msg: dict[int, types.Message] = {}

def build_city_keyboard() -> InlineKeyboardMarkup:
    buttons = [[InlineKeyboardButton(text=city, callback_data=f"city_{city}")] for city in CITIES]
    buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_custom")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def update_message(msg_obj, text: str, reply_markup: InlineKeyboardMarkup = None) -> types.Message:
    """
    –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ.
    """
    try:
        await msg_obj.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        return msg_obj
    except Exception:
        new_msg = await msg_obj.answer(text, reply_markup=reply_markup, parse_mode="HTML")
        return new_msg

@dp.message(Command("start"))
async def start_handler(message: Message):
    sent = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∏—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
        reply_markup=build_city_keyboard()
    )
    user_last_msg[message.from_user.id] = sent

@dp.message(Command("help"))
async def help_handler(message: Message):
    await message.answer(
        "üëã –Ø –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–∏—é—Ç—ã –∏ –ø–æ—Å—Ç—ã —Å –Ω—É–∂–¥–∞–º–∏.\n\n"
        "üìå /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥\n"
        "‚≠ê /fav ‚Äî –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
        "‚ÑπÔ∏è /about ‚Äî —É–∑–Ω–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
        "‚ùì /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

@dp.message(Command("about"))
async def about_handler(message: Message):
    await message.answer(
        "üêæ –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —á–∞—Å—Ç—å —à–∫–æ–ª—å–Ω–æ–≥–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –ø—Ä–∏—é—Ç—ã, "
        "–∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
        "–ü—Ä–æ–µ–∫—Ç –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π üíô"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data.startswith("city_"))
async def process_city(callback: types.CallbackQuery):
    # callback.data = "city_{city}" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "city_–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")
    city = callback.data[5:]
    user_city[callback.from_user.id] = city
    msg = await update_message(callback.message, f"–ò—â–µ–º –ø—Ä–∏—é—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {city}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    user_last_msg[callback.from_user.id] = msg
    await show_shelters(msg, city)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "city_custom")
async def choose_custom_city(callback: types.CallbackQuery):
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é
    msg = await update_message(callback.message, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é:")
    user_last_msg[callback.from_user.id] = msg
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@dp.message(lambda m: m.text and m.from_user.id not in user_city or (m.text not in CITIES))
async def handle_custom_city(message: Message):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–∞–∂–∞–ª "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", —Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–≤–æ–¥
    city = message.text.strip()
    user_city[message.from_user.id] = city
    sent = await message.answer(f"–ò—â–µ–º –ø—Ä–∏—é—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {city}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    user_last_msg[message.from_user.id] = sent
    await show_shelters(sent, city)

async def show_shelters(msg_obj, city: str):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—é—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    shelters = get_shelters_for_city(city)

    if not shelters:
        temp = await update_message(msg_obj, f"üì≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–æ–¥—É {city} –ø–æ–∫–∞ –Ω–µ—Ç. –ò—â–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ...")
        user_last_msg[msg_obj.chat.id] = temp
        try:
            from vk_parser import search_vk_groups
            await asyncio.to_thread(search_vk_groups, city)
        except Exception as e:
            await msg_obj.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–±—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:", e)

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã (–¥–æ 10 —Å–µ–∫—É–Ω–¥)
        for _ in range(5):
            await asyncio.sleep(2)
            shelters = get_shelters_for_city(city)
            if shelters:
                break

        if not shelters:
            await update_message(msg_obj, "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏—é—Ç–æ–≤
    buttons = []
    for shelter in shelters:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º: id, name, url, _, info, post_date
        shelter_id, name, url, _, info, post_date = shelter
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"info_{shelter_id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º" –Ω–∞–ø—Ä—è–º—É—é –≤ inline_keyboard
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üåÜ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="back_cities")])
    msg = await update_message(msg_obj, "üìã –í–æ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–∏—é—Ç–æ–≤:", reply_markup=keyboard)
    user_last_msg[msg.chat.id] = msg

def trim_to_sentence(text: str, limit: int = 4096) -> str:
    """
    –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è —Å–ª–æ–≤–æ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç.
    """
    if len(text) <= limit:
        return text
    cutoff = text[:limit]
    if " " in cutoff:
        cutoff = cutoff[:cutoff.rfind(" ")]
    return cutoff + "..."

def clean_info(info: str) -> tuple[str, str]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:
    - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç—å: –∏—â–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ¬´—Å—Ä–æ—á–Ω–æ¬ª / ¬´–Ω–µ —Å—Ä–æ—á–Ω–æ¬ª.
    - –£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–∞ "–≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ" –∏ "—Å–±–æ—Ä".
    - –£–±–∏—Ä–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—ã.
    - –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–∞–∑–¥–µ–ª "—á—Ç–æ –Ω—É–∂–Ω–æ:", —Ç–æ –±–µ—Ä—ë—Ç—Å—è –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ,
      —á—Ç–æ —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, —Å—Ä–æ—á–Ω–æ—Å—Ç—å)
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    urgency = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    lower_info = info.lower()
    if "—Å—Ä–æ—á–Ω–æ" in lower_info:
        urgency = "–°—Ä–æ—á–Ω–æ"
    elif "–Ω–µ —Å—Ä–æ—á–Ω–æ" in lower_info:
        urgency = "–ù–µ —Å—Ä–æ—á–Ω–æ"

    # –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    for word in ["–≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ", "—Å–±–æ—Ä"]:
        info = info.replace(word, "")

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
    lines = [line.strip() for line in info.split("\n") if line.strip()]
    seen = set()
    unique_lines = []
    for line in lines:
        if line.lower() not in seen:
            unique_lines.append(line)
            seen.add(line.lower())
    cleaned_info = "\n".join(unique_lines)

    # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–ª–æ–∫ ¬´—á—Ç–æ –Ω—É–∂–Ω–æ:¬ª, –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    lower_clean = cleaned_info.lower()
    if "—á—Ç–æ –Ω—É–∂–Ω–æ:" in lower_clean:
        idx = lower_clean.index("—á—Ç–æ –Ω—É–∂–Ω–æ:") + len("—á—Ç–æ –Ω—É–∂–Ω–æ:")
        remainder = cleaned_info[idx:].strip()
        sentence = re.split(r"[.!?]", remainder)[0].strip()
        main_need = sentence
    else:
        main_need = cleaned_info[:100].strip()

    return main_need, urgency

@dp.callback_query(lambda c: c.data.startswith("info_"))
async def show_info(callback: types.CallbackQuery):
    shelter_id = callback.data[5:]
    row = get_shelter_by_id(shelter_id)
    if row:
        name, link, info, post_date = row

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ Google Maps
        link_encoded = quote(link)
        link_url = f"https://www.google.com/maps/search/{link_encoded}"
        link_html = f'<a href="{link_url}">{link}</a>'

        msg_text = f"<b>{name}</b>\n{link_html}\n"

        # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—ã–ª –ø–æ—Å—Ç
        if post_date:
            try:
                dt = datetime.strptime(post_date, "%Y-%m-%d")
            except Exception:
                try:
                    dt = datetime.strptime(post_date, "%d.%m.%Y")
                except Exception:
                    dt = None
            if dt:
                days_ago = (datetime.now() - dt).days
                msg_text += f"\nüóì {days_ago} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        if info:
            main_need, urgency = clean_info(info)
        else:
            main_need, urgency = "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.", "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        msg_text += f"\n<b>–û—Å–Ω–æ–≤–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:</b>\n{trim_to_sentence(main_need, 400)}\n"
        msg_text += f"\n<b>–°—Ä–æ—á–Ω–æ—Å—Ç—å:</b> {urgency}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
        # –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏—é—Ç–∞–º (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞), –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
        city = user_city.get(callback.from_user.id, "")
        nav_buttons = [
            [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"fav|{shelter_id}|{link}")],
            [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–∏—é—Ç–∞–º", callback_data=f"back_shelters|{city}")],
            [InlineKeyboardButton(text="üåÜ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="back_cities")],
            [InlineKeyboardButton(text="‚≠ê –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã", callback_data="fav_menu")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=nav_buttons)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–æ–≤–æ–π
        edited_msg = await update_message(callback.message, msg_text, reply_markup=keyboard)
        user_last_msg[callback.from_user.id] = edited_msg
    else:
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("fav|"))
async def add_to_favorites(callback: types.CallbackQuery):
    # callback.data = "fav|{group_id}|{post_url}"
    _, group_id, post_url = callback.data.split("|")
    user_id = callback.from_user.id
    add_favorite(user_id, post_url, group_id)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ! üíæ")

@dp.callback_query(lambda c: c.data == "back_cities")
async def back_to_cities(callback: types.CallbackQuery):
    msg = await update_message(callback.message, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø—Ä–∏—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:", reply_markup=build_city_keyboard())
    user_last_msg[callback.from_user.id] = msg
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("back_shelters"))
async def back_to_shelters(callback: types.CallbackQuery):
    # callback.data = "back_shelters|{city}"
    parts = callback.data.split("|", 1)
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞: –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
    city = parts[1]
    msg = await update_message(callback.message, f"–ò—â–µ–º –ø—Ä–∏—é—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ {city}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
    user_last_msg[callback.from_user.id] = msg
    await show_shelters(msg, city)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "fav_menu")
async def show_fav_menu(callback: types.CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    user_id = callback.from_user.id
    favorites = get_user_favorites(user_id)
    if not favorites:
        text = "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤."
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåÜ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="back_cities")]
        ])
        msg = await update_message(callback.message, text, reply_markup=kb)
        user_last_msg[user_id] = msg
    else:
        text = "‚≠ê –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
        kb_buttons = []
        for post_url, group_id in favorites:
            kb_buttons.append([InlineKeyboardButton(text="üîó –ü–æ—Å—Ç", url=post_url)])
        kb_buttons.append([InlineKeyboardButton(text="üåÜ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="back_cities")])
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        msg = await update_message(callback.message, text, reply_markup=kb)
        user_last_msg[user_id] = msg
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("recent_posts_"))
async def handle_recent_posts(callback: types.CallbackQuery):
    group_id = callback.data.replace("recent_posts_", "")
    posts = get_recent_posts_for_group(group_id)
    if posts:
        text = ""
        for url, text_part in posts:
            text += f"{trim_to_sentence(text_part, 300)}\n\nüîó {url}\n\n"
        await update_message(callback.message, text)
    else:
        await update_message(callback.message, "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π üòø")
    await callback.answer()

@dp.message(Command("fav"))
async def show_favorites(message: Message):
    user_id = message.from_user.id
    favorites = get_user_favorites(user_id)
    if not favorites:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
        return
    text = "‚≠ê –°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
    kb_buttons = []
    for post_url, group_id in favorites:
        kb_buttons.append([InlineKeyboardButton(text="üîó –ü–æ—Å—Ç", url=post_url)])
    kb_buttons.append([InlineKeyboardButton(text="üåÜ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="back_cities")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    sent = await message.answer(text, reply_markup=keyboard)
    user_last_msg[user_id] = sent
